****************************************************************
                            ONSJHJSA
****************************************************************

**** HASHMAP:

--> In ArrayList, elememts are stored as an ordered collection i.e. with an index number.
--> In HashMap, elements are stored in <Key,Value> pairs. Here Key and Value can be of any type i.e. Integer, String, Double ect.

For eg:
Case1:
        HashMap<String, Integer> map1 = new HashMap<String,Integer>();
        map1.put("Key1", 1);

Case2:
        HashMap<Double, Integer> map1 = new HashMap<Double,Integer>();
        map1.put(1.00, 1);

--> To get the value from HasMap, get() is used.
       map1.get(1.00);      //Dev needs to pass the Key value and get() return value associated with that key.


==> Now, Dev created a new HashMap.

        HashMap<Integer, String> map = new HashMap<Integer, String>();

        map.put(1,"One");
        map.put(2,"Two");
        map.put(3,"Three");

        System.out.println(map.get(1));

--> Now to get all the keys from HashMap.

        for(Integer i : map.keySet()){
            System.out.println("Keys == " + i);
        }

        O/P:
        Keys == 1
        Keys == 2
        Keys == 3

--> To print all the key & value pairs.

        for(Integer i : map.keySet()){
            System.out.println(i + " : " + map.get(i));
        }

        O/P:
        1 : One
        2 : Two
        3 : Three

==> To remove an element. Provide key to remove that data from HashMap.

            map.remove(3);
            System.out.println("Remove Key = 3");

==> To delete entire HashMap.
        map.clear();


==> MIMP:: HashMap is not sorting the elements based on Key. In other words, HashMap is unsorted Map.
[To achieve sorted Map, Dev can use
"TreeMap" -- Elements are sorted based on the natural order i.e. For Integers 0,1,2,3 and for Strings Alphabetical Order a,b,c,d]

==> Another Map is LinkedHashMap -- Reserves the order at which elements are entered.
For eg.

        LinkedHashMap lsMap = new LinkedHashMap();
        lsMap.add(10, "A");
        lsMap.add(8,"b:);
        lsMap.add(15,"c");
        lsMap.add(1,"d");

--> Now, lsMap prints all the elements based on their order of entry. i.e 10,8,15,1.

--> Whereas TreeMap provides elements based on order of Key i.e. 1,8,10,15

================================================================================================================

--> One drawback of HashMap is: allowed duplicate key values (Not unique keys).
For eg:

    HashMap map = new HashMap();    //Initialize Map without Generics. i.e. HashMap<Integer,String> map = new HashMap<Integer,String>();

    map.put(1,"One");
    map.put(1,"Two");

    Here, Map allows duplicate key values. In this case when Dev used map.get() to retain value associated with key then the latest value
    associated with key will retuen.

    "map.get(1)" returns "Two" as Two is latest value associated with Key "1".

====
Solution:

--> To achieve unique key Dev needs to use "Set".
--> Simillar with "Map" interface, "Set" interface has "HashSet", "LinkedHashSet" and "TreeSet".
