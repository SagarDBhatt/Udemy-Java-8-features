********************************
        ONSJHJSA
********************************

--> ArrayList is not efficient for Delete operation.

For Eg:
        //Initialize an ArrayList. Dev provided Wrapper class "Integer" to describe that the ArrayList is of type Integer.
        ArrayList<Integer> numbers = new ArrayList<Integer>();

        //Adding value to the ArrayList. Here, Size of the "numbers" is 4. (Index 0, 1, 2, 3)
        numbers.add(5);
        numbers.add(10);
        numbers.add(15);
        numbers.add(20);

--> Now, to delete first record. This is the most expensive (most time consuming) process.
        numbers.remove(0);

--> In ArrayList, all the elements are stored in Indexed order. So when Dev removed / deleted the first element then all the other elements
shift one index back. This shifting of all the elements consumes good amount of time.
--> Thus, ArrayList is not suitable for Delete operation.

=========================================================================================

==> There are two methods to Sort the objects / elemetns of List Interface (ArrayList Or LinkedList)
1. Collections.sort(List list)
2. Arrays.sort(Array[] array)

==> Arrays.sort() is used to sort the Arrays in ascending order of their natural order.
==> Collection.sort() is used to sort Collection class objects such as ArrayList, LinkedList to sort in their natural ascending order.

--> In manay cases, Dev need to sort the list based on specific crieteria or field. In this case, Dev needs to define sorting method in
Comparator class. 